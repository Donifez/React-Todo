{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\USER\\\\Desktop\\\\React-Todo\\\\src\\\\App.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\React-Todo\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\USER\\\\Desktop\\\\React-Todo\\\\src\\\\index.js\"],\"names\":[\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"newItem\",\"list\",\"key\",\"value\",\"setState\",\"defineProperty\",\"id\",\"Math\",\"random\",\"slice\",\"toConsumableArray\",\"push\",\"updatedList\",\"filter\",\"item\",\"_this2\",\"react_default\",\"a\",\"createElement\",\"className\",\"type\",\"placeholder\",\"onChange\",\"e\",\"updateInput\",\"target\",\"onClick\",\"addItem\",\"map\",\"deleteItem\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"iOA2EeA,cAxEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACLQ,MAAM,CACTC,QAAQ,GACRC,KAAK,IAJaT,2EAQNU,EAAKC,GAEfR,KAAKS,SAALX,OAAAY,EAAA,EAAAZ,CAAA,GACGS,EAAKC,sCAKR,IAAMH,EAAQ,CACbM,GAAG,EAAGC,KAAKC,SACXL,MAAMR,KAAKI,MAAMC,QAAQS,SAGpBR,EAAKR,OAAAiB,EAAA,EAAAjB,CAAIE,KAAKI,MAAME,MAE1BA,EAAKU,KAAKX,GAEVL,KAAKS,SAAS,CACZH,KAAAA,EACAD,QAAQ,wCAGDM,GAET,IAEMM,EAFKnB,OAAAiB,EAAA,EAAAjB,CAAIE,KAAKI,MAAME,MAEFY,OAAO,SAAAC,GAAI,OAAEA,EAAKR,KAAOA,IACjDX,KAAKS,SAAS,CAACH,KAAKW,qCAEd,IAAAG,EAAApB,KACR,OACEqB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,KAAA,KAAA,cACHF,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,kBACAF,EAAAC,EAAAC,cAAA,KAAA,MACHF,EAAAC,EAAAC,cAAA,QAAA,CACCE,KAAK,OACJC,YAAY,iBACZlB,MAAOR,KAAKI,MAAMC,QACpBsB,SAAU,SAAAC,GAAC,OAAER,EAAKS,YAAY,UAAWD,EAAEE,OAAOtB,UAElDa,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,MACjBO,QAAS,WAAA,OAAIX,EAAKY,YADnB,OAEAX,EAAAC,EAAAC,cAAA,KAAA,MACAF,EAAAC,EAAAC,cAAA,KAAA,KACGvB,KAAKI,MAAME,KAAK2B,IAAI,SAAAd,GACnB,OACEE,EAAAC,EAAAC,cAAA,KAAA,CAAIhB,IAAKY,EAAKR,IACXQ,EAAKX,MACNa,EAAAC,EAAAC,cAAA,SAAA,CAAQZ,GAAG,MAAMoB,QAAS,WAAA,OAAIX,EAAKc,WAAWf,EAAKR,MAAnD,kBA3DUwB,EAAAA,WCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, {Component} from 'react';\\r\\nimport \\\"./App.css\\\";\\r\\nclass App extends Component{\\r\\n  constructor(props){\\r\\n    super(props);\\r\\nthis.state={\\r\\n  newItem:\\\"\\\",\\r\\n  list:[] \\r\\n}\\r\\n    \\r\\n  }\\r\\n  updateInput(key, value){\\r\\n    //update react state\\r\\n    this.setState({\\r\\n      [key]:value\\r\\n    })\\r\\n  }\\r\\n  addItem(){\\r\\n    // create item with unique id\\r\\n    const newItem={\\r\\n     id:1+ Math.random(),\\r\\n     value:this.state.newItem.slice()\\r\\n    };\\r\\n    // copy of current list of items\\r\\n    const list=[...this.state.list];\\r\\n    // add new item to the list\\r\\n    list.push(newItem);\\r\\n    // update state with new list and reset newItem input\\r\\n    this.setState({\\r\\n      list,\\r\\n      newItem:\\\"\\\",\\r\\n    });\\r\\n  }\\r\\n  deleteItem(id){\\r\\n    // copy current list of items\\r\\n    const list=[...this.state.list];\\r\\n    //filter bout item that is being deleted\\r\\n    const updatedList= list.filter(item=>item.id !== id);\\r\\n    this.setState({list:updatedList})\\r\\n  }\\r\\n  render(){\\r\\n  return (\\r\\n    <div className=\\\"App\\\">\\r\\n    <h1>TO-DO LIST</h1>\\r\\n <div>\\r\\n   <h3>Add an item...</h3>\\r\\n   <br/>\\r\\n<input\\r\\n type=\\\"text\\\"\\r\\n  placeholder=\\\"Type item here\\\" \\r\\n  value={this.state.newItem}\\r\\nonChange={e=>this.updateInput(\\\"newItem\\\", e.target.value)}/>\\r\\n\\r\\n<button className=\\\"add\\\" \\r\\n onClick={()=>this.addItem()}>Add</button>\\r\\n<br/>\\r\\n<ul>\\r\\n  {this.state.list.map(item=>{\\r\\n    return(\\r\\n      <li key={item.id}>\\r\\n        {item.value}\\r\\n        <button id=\\\"del\\\" onClick={()=>this.deleteItem(item.id)}>\\r\\n          X\\r\\n        </button>\\r\\n      </li>\\r\\n    )\\r\\n  })}\\r\\n</ul>\\r\\n </div>\\r\\n\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n\",\"// This optional code is used to register a service worker.\\r\\n// register() is not called by default.\\r\\n\\r\\n// This lets the app load faster on subsequent visits in production, and gives\\r\\n// it offline capabilities. However, it also means that developers (and users)\\r\\n// will only see deployed updates on subsequent visits to a page, after all the\\r\\n// existing tabs open on the page have been closed, since previously cached\\r\\n// resources are updated in the background.\\r\\n\\r\\n// To learn more about the benefits of this model and instructions on how to\\r\\n// opt-in, read https://bit.ly/CRA-PWA\\r\\n\\r\\nconst isLocalhost = Boolean(\\r\\n  window.location.hostname === 'localhost' ||\\r\\n    // [::1] is the IPv6 localhost address.\\r\\n    window.location.hostname === '[::1]' ||\\r\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\r\\n    window.location.hostname.match(\\r\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\r\\n    )\\r\\n);\\r\\n\\r\\nexport function register(config) {\\r\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\r\\n    // The URL constructor is available in all browsers that support SW.\\r\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\r\\n    if (publicUrl.origin !== window.location.origin) {\\r\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\r\\n      // from what our page is served on. This might happen if a CDN is used to\\r\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    window.addEventListener('load', () => {\\r\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\r\\n\\r\\n      if (isLocalhost) {\\r\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\r\\n        checkValidServiceWorker(swUrl, config);\\r\\n\\r\\n        // Add some additional logging to localhost, pointing developers to the\\r\\n        // service worker/PWA documentation.\\r\\n        navigator.serviceWorker.ready.then(() => {\\r\\n          console.log(\\r\\n            'This web app is being served cache-first by a service ' +\\r\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\r\\n          );\\r\\n        });\\r\\n      } else {\\r\\n        // Is not localhost. Just register service worker\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction registerValidSW(swUrl, config) {\\r\\n  navigator.serviceWorker\\r\\n    .register(swUrl)\\r\\n    .then(registration => {\\r\\n      registration.onupdatefound = () => {\\r\\n        const installingWorker = registration.installing;\\r\\n        if (installingWorker == null) {\\r\\n          return;\\r\\n        }\\r\\n        installingWorker.onstatechange = () => {\\r\\n          if (installingWorker.state === 'installed') {\\r\\n            if (navigator.serviceWorker.controller) {\\r\\n              // At this point, the updated precached content has been fetched,\\r\\n              // but the previous service worker will still serve the older\\r\\n              // content until all client tabs are closed.\\r\\n              console.log(\\r\\n                'New content is available and will be used when all ' +\\r\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\r\\n              );\\r\\n\\r\\n              // Execute callback\\r\\n              if (config && config.onUpdate) {\\r\\n                config.onUpdate(registration);\\r\\n              }\\r\\n            } else {\\r\\n              // At this point, everything has been precached.\\r\\n              // It's the perfect time to display a\\r\\n              // \\\"Content is cached for offline use.\\\" message.\\r\\n              console.log('Content is cached for offline use.');\\r\\n\\r\\n              // Execute callback\\r\\n              if (config && config.onSuccess) {\\r\\n                config.onSuccess(registration);\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        };\\r\\n      };\\r\\n    })\\r\\n    .catch(error => {\\r\\n      console.error('Error during service worker registration:', error);\\r\\n    });\\r\\n}\\r\\n\\r\\nfunction checkValidServiceWorker(swUrl, config) {\\r\\n  // Check if the service worker can be found. If it can't reload the page.\\r\\n  fetch(swUrl)\\r\\n    .then(response => {\\r\\n      // Ensure service worker exists, and that we really are getting a JS file.\\r\\n      const contentType = response.headers.get('content-type');\\r\\n      if (\\r\\n        response.status === 404 ||\\r\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\r\\n      ) {\\r\\n        // No service worker found. Probably a different app. Reload the page.\\r\\n        navigator.serviceWorker.ready.then(registration => {\\r\\n          registration.unregister().then(() => {\\r\\n            window.location.reload();\\r\\n          });\\r\\n        });\\r\\n      } else {\\r\\n        // Service worker found. Proceed as normal.\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    })\\r\\n    .catch(() => {\\r\\n      console.log(\\r\\n        'No internet connection found. App is running in offline mode.'\\r\\n      );\\r\\n    });\\r\\n}\\r\\n\\r\\nexport function unregister() {\\r\\n  if ('serviceWorker' in navigator) {\\r\\n    navigator.serviceWorker.ready.then(registration => {\\r\\n      registration.unregister();\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\",\"import React from 'react';\\r\\nimport ReactDOM from 'react-dom';\\r\\nimport \\\"./App.css\\\";\\r\\nimport App from './App';\\r\\nimport * as serviceWorker from './serviceWorker';\\r\\n\\r\\nReactDOM.render(<App />, document.getElementById('root'));\\r\\n\\r\\n// If you want your app to work offline and load faster, you can change\\r\\n// unregister() to register() below. Note this comes with some pitfalls.\\r\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\r\\nserviceWorker.unregister();\\r\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,t,n){e.exports=n(17)},17:function(e,t,n){\"use strict\";n.r(t);var a=n(0),i=n.n(a),l=n(4),r=n.n(l),c=(n(3),n(1)),o=n(5),u=n(6),s=n(7),d=n(9),m=n(8),h=n(10),p=function(e){function t(e){var n;return Object(u.a)(this,t),(n=Object(d.a)(this,Object(m.a)(t).call(this,e))).state={newItem:\"\",list:[]},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:\"updateInput\",value:function(e,t){this.setState(Object(o.a)({},e,t))}},{key:\"addItem\",value:function(){var e={id:1+Math.random(),value:this.state.newItem.slice()},t=Object(c.a)(this.state.list);t.push(e),this.setState({list:t,newItem:\"\"})}},{key:\"deleteItem\",value:function(e){var t=Object(c.a)(this.state.list).filter(function(t){return t.id!==e});this.setState({list:t})}},{key:\"render\",value:function(){var e=this;return i.a.createElement(\"div\",{className:\"App\"},i.a.createElement(\"h1\",null,\"TO-DO LIST\"),i.a.createElement(\"div\",null,i.a.createElement(\"h3\",null,\"Add an item...\"),i.a.createElement(\"br\",null),i.a.createElement(\"input\",{type:\"text\",placeholder:\"Type item here\",value:this.state.newItem,onChange:function(t){return e.updateInput(\"newItem\",t.target.value)}}),i.a.createElement(\"button\",{className:\"add\",onClick:function(){return e.addItem()}},\"Add\"),i.a.createElement(\"br\",null),i.a.createElement(\"ul\",null,this.state.list.map(function(t){return i.a.createElement(\"li\",{key:t.id},t.value,i.a.createElement(\"button\",{id:\"del\",onClick:function(){return e.deleteItem(t.id)}},\"X\"))}))))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(i.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},3:function(e,t,n){}},[[11,1,2]]]);","extractedComments":[]}